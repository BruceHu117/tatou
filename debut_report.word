## Debug Report

### Introduction

This report details the debugging process for the `tatou` web application. The goal of the debugging process was to identify and fix security vulnerabilities and other issues in the application.

### Vulnerabilities Found

#### 1. Command Injection

* **File:** `unsafe_bash_bridge_append_eof.py`
* **Line:** 53 and 72
* **Description:** The `add_watermark` and `read_secret` methods in the `UnsafeBashBridgeAppendEOF` class were vulnerable to command injection. The `pdf.resolve()` and `secret` variables were being concatenated directly into a shell command, which was then executed using `subprocess.run` with `shell=True`. This would allow an attacker to execute arbitrary shell commands on the server.
* **Code Snippet (vulnerable code):**
```python
# add_watermark method
cmd = "cat " + str(pdf.resolve()) + " &&  printf \"" + secret + "\""
res = subprocess.run(cmd, shell=True, check=True, capture_output=True)

# read_secret method
cmd = "sed -n '1,/^\(%%EOF\|.*%%EOF\)$/!p' " + str(pdf.resolve())
res = subprocess.run(cmd, shell=True, check=True, encoding="utf-8", capture_output=True)
```

#### 2. Insecure Deserialization

* **File:** `server.py`
* **Line:** 633
* **Description:** The `/api/load-plugin` endpoint was vulnerable to insecure deserialization. The endpoint would take a filename from the user, read the file, and then use `pickle.load` to deserialize the contents of the file. This would allow an attacker to create a malicious pickle file that, when deserialized, would execute arbitrary code on the server.
* **Code Snippet (vulnerable code):**
```python
@app.post("/api/load-plugin")
@require_auth
def load_plugin():
    # ...
    with plugin_path.open("rb") as f:
        obj = _pickle.load(f)
    # ...
```

#### 3. Database Port Exposure

* **File:** `docker-compose.yml`
* **Line:** 49
* **Description:** The `db` service in the `docker-compose.yml` file was exposing port `3306` to the host machine. This was not necessary and increased the attack surface of the application.
* **Code Snippet (vulnerable code):**
```yaml
services:
  db:
    # ...
    ports:
      - "3306:3306"
```

### Patches Applied

#### 1. Command Injection

* **File:** `unsafe_bash_bridge_append_eof.py`
* **Description:** The command injection vulnerability was fixed by using a new function `escape_shell_string` to properly escape the `pdf.resolve()` and `secret` variables before they are used in the shell command.
* **Code Snippet (patched code):**
```python
def escape_shell_string(s: str) -> str:
    return "'" + s.replace("'", "'\\''") + "'"

# add_watermark method
cmd = "cat " + escape_shell_string(str(pdf.resolve())) + " &&  printf \"" + escape_shell_string(secret) + "\""
res = subprocess.run(cmd, shell=True, check=True, capture_output=True)

# read_secret method
cmd = r"sed -n '1,/^\(%%EOF\|.*%%EOF\)$/!p' " + escape_shell_string(str(pdf.resolve()))
res = subprocess.run(cmd, shell=True, check=True, encoding="utf-8", capture_output=True)
```

#### 2. Insecure Deserialization

* **File:** `server.py`
* **Description:** The insecure deserialization vulnerability was fixed by removing the `/api/load-plugin` endpoint entirely.

#### 3. Database Port Exposure

* **File:** `docker-compose.yml`
* **Description:** The database port exposure vulnerability was fixed by removing the port mapping for the `db` service.

### Other Issues Found

* **Syntax Error:** A `SyntaxError: unterminated string literal` was found in `unsafe_bash_bridge_append_eof.py`. This was fixed by correcting the `escape_shell_string` function.
* **Syntax Warning:** A `SyntaxWarning: invalid escape sequence '\('` was found in `unsafe_bash_bridge_append_eof.py`. This was fixed by using a raw string for the `cmd` variable in the `read_secret` method.

### Verification

The following steps were taken to verify that the application is running correctly after applying the patches:

1.  The Docker containers were rebuilt and restarted using `docker compose up --build -d`.
2.  A health check was performed using `curl -v http://127.0.0.1:5000/healthz`.
3.  The logs of the `tatou-server-1` container were checked for errors.

### Conclusion

The security vulnerabilities and other issues found in the `tatou` web application have been fixed. The application is now more secure and is running correctly.





Changelog (2025-09-25)


1.delete file


   * 删除了存在严重安全漏洞的水印方法文件：
   * 文件路径: E:\SOFTSEC VT 2025 Group project\tatou\server\src\watermarking_utils.py
       * 删除了以下导入语句:
  `diff
          METHODS: Dict[str, WatermarkingMethod] = {
              AddAfterEOF.name: AddAfterEOF(),
          -   UnsafeBashBridgeAppendEOF.name: UnsafeBashBridgeAppendEOF()
          }
          `


2.

   * Added Visible Watermarking Method (`visible-text`):
   * Added Robust Invisible Watermarking Method (`metadata`):
   * Registered New Methods: Both visible-text and metadata methods have been registered in
     server/src/watermarking_utils.py and are now available for use through the command-line
     interface and the API.
